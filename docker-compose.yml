services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs-app
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_USERNAME=${DB_USERNAME:-root}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_DATABASE=${DB_DATABASE:-chat_crm_db}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - /app/node_modules
      - .:/app
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nestjs-network
    restart: unless-stopped
    # command: npm run start:prod # produccion configuracion with NODE_ENV=production
    command: ["bash", "-c", "npm run start:dev"] # desarrollo configuracion with NODE_ENV=development

  mysql:
    image: mysql:8.0
    container_name: nestjs-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: ${DB_DATABASE:-chat_crm_db}
      MYSQL_USER: ${DB_USERNAME:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - nestjs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: nestjs-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - nestjs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s
      start_period: 10s
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --requirepass $$REDIS_PASSWORD --appendonly yes
      else
        redis-server --appendonly yes
      fi
      "

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: nestjs-phpmyadmin
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ${DB_USERNAME:-root}
      PMA_PASSWORD: ${DB_PASSWORD:-password}
    depends_on:
      - mysql
    networks:
      - nestjs-network
    restart: unless-stopped

# Vol√∫menes persistentes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

# Red personalizada
networks:
  nestjs-network:
    driver: bridge
